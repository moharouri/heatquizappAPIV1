// <auto-generated />
using System;
using HeatQuizAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace heatquizappapi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231130164116_courses update")]
    partial class coursesupdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HeatQuizAPI.Models.BaseModels.DataPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataPools");
                });

            modelBuilder.Entity("HeatQuizAPI.Models.BaseModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StatisticsStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("HeatQuizAPI.Models.LevelsOfDifficulty.LevelOfDifficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LevelsOfDifficulty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("heatquizapp_api.Models.BaseModels.DataPoolAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataPoolId");

                    b.HasIndex("UserId");

                    b.ToTable("DataPoolAccess");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DataPoolId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("heatquizapp_api.Models.QuestionInformation.Information", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Latex")
                        .HasColumnType("text");

                    b.Property<long?>("PDFSize")
                        .HasColumnType("bigint");

                    b.Property<string>("PDFURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DataPoolId");

                    b.ToTable("Information");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Questions.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ImageHeight")
                        .HasColumnType("integer");

                    b.Property<long>("ImageSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ImageWidth")
                        .HasColumnType("integer");

                    b.Property<int?>("InformationId")
                        .HasColumnType("integer");

                    b.Property<int>("LevelOfDifficultyId")
                        .HasColumnType("integer");

                    b.Property<long?>("PDFSize")
                        .HasColumnType("bigint");

                    b.Property<string>("PDFURL")
                        .HasColumnType("text");

                    b.Property<int>("SubtopicId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DataPoolId");

                    b.HasIndex("InformationId");

                    b.HasIndex("LevelOfDifficultyId");

                    b.HasIndex("SubtopicId");

                    b.ToTable("QuestionBase");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Series.QuestionSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRandom")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfPools")
                        .HasColumnType("integer");

                    b.Property<int>("RandomSize")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DataPoolId");

                    b.ToTable("QuestionSeries");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Series.QuestionSeriesElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("PoolNumber")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPoolId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SeriesId");

                    b.ToTable("QuestionSeriesElement");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Series.QuestionSeriesStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MapElementName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MapKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OnMobile")
                        .HasColumnType("boolean");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<string>("SuccessRate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPoolId");

                    b.HasIndex("SeriesId");

                    b.ToTable("QuestionSeriesStatistic");
                });

            modelBuilder.Entity("heatquizapp_api.Models.StatisticsAndStudentFeedback.QuestionPDFStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Correct")
                        .HasColumnType("boolean");

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPoolId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionPDFStatistic");
                });

            modelBuilder.Entity("heatquizapp_api.Models.StatisticsAndStudentFeedback.QuestionStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Correct")
                        .HasColumnType("boolean");

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPoolId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionStatistic");
                });

            modelBuilder.Entity("heatquizapp_api.Models.StatisticsAndStudentFeedback.QuestionStudentFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPoolId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionStudentFeedback");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Topics.Subtopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataPoolId");

                    b.HasIndex("TopicId");

                    b.ToTable("Subtopics");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Topics.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DataPoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DataPoolId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("heatquizapp_api.Models.BaseModels.DataPoolAccess", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany("PoolAccesses")
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", "User")
                        .WithMany("PoolAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Courses.Course", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("DataPool");
                });

            modelBuilder.Entity("heatquizapp_api.Models.QuestionInformation.Information", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("DataPool");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Questions.QuestionBase", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.QuestionInformation.Information", "Information")
                        .WithMany()
                        .HasForeignKey("InformationId");

                    b.HasOne("HeatQuizAPI.Models.LevelsOfDifficulty.LevelOfDifficulty", "LevelOfDifficulty")
                        .WithMany()
                        .HasForeignKey("LevelOfDifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.Topics.Subtopic", "Subtopic")
                        .WithMany("Questions")
                        .HasForeignKey("SubtopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("DataPool");

                    b.Navigation("Information");

                    b.Navigation("LevelOfDifficulty");

                    b.Navigation("Subtopic");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Series.QuestionSeries", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("DataPool");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Series.QuestionSeriesElement", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.Questions.QuestionBase", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.Series.QuestionSeries", "Series")
                        .WithMany("Elements")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPool");

                    b.Navigation("Question");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Series.QuestionSeriesStatistic", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.Series.QuestionSeries", "Series")
                        .WithMany("Statistics")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPool");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("heatquizapp_api.Models.StatisticsAndStudentFeedback.QuestionPDFStatistic", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.Questions.QuestionBase", "Question")
                        .WithMany("QuestionPDFStatistics")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPool");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("heatquizapp_api.Models.StatisticsAndStudentFeedback.QuestionStatistic", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.Questions.QuestionBase", "Question")
                        .WithMany("QuestionStatistics")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPool");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("heatquizapp_api.Models.StatisticsAndStudentFeedback.QuestionStudentFeedback", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.Questions.QuestionBase", "Question")
                        .WithMany("StudentFeedback")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPool");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Topics.Subtopic", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("heatquizapp_api.Models.Topics.Topic", "Topic")
                        .WithMany("Subtopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPool");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Topics.Topic", b =>
                {
                    b.HasOne("HeatQuizAPI.Models.BaseModels.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatQuizAPI.Models.BaseModels.DataPool", "DataPool")
                        .WithMany()
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("DataPool");
                });

            modelBuilder.Entity("HeatQuizAPI.Models.BaseModels.DataPool", b =>
                {
                    b.Navigation("PoolAccesses");
                });

            modelBuilder.Entity("HeatQuizAPI.Models.BaseModels.User", b =>
                {
                    b.Navigation("PoolAccesses");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Questions.QuestionBase", b =>
                {
                    b.Navigation("QuestionPDFStatistics");

                    b.Navigation("QuestionStatistics");

                    b.Navigation("StudentFeedback");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Series.QuestionSeries", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Topics.Subtopic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("heatquizapp_api.Models.Topics.Topic", b =>
                {
                    b.Navigation("Subtopics");
                });
#pragma warning restore 612, 618
        }
    }
}
